1+1+0.5+1.75+1+1
27.75+6.25
1+2+3+3+3+1+2+2+3+4+4
2+3+1
28+6
28/34
2+2+4+3+3+1+2+2+4+1.75+2
1+2+1+3+0.25
26.75+7.25
1.5+2+4+1+2.5+2+1+2+2+1+1.75
1.5+2+2+0.5+1+1+3+0.25+2
20.75+13.25
2.25+2+4+2.5+2+2+2+2+2+4+2
0.75+2+0.5+1+1+2
26.75+7.25
26.75/34
2+2+2+3+2+2+1+3+4+2+3
2+1+2+1
28+6
0.25+2+2.5+2+3+2+2+8
2.75+3.5+1+2+1+2
21.75+12.25
2.5+2+4.5+2+1+1.5+2+1+1.75+2
0.5+1.5+1+3+1+0.5+3+3+0.25
20.25+13.75
2.5+2+6+3+3+2+2+2+1+4+2
0.5+2+2
29.5+4.5
2+2+2+3+2+2+2+2+2.75+3+6+2
2+0.25+1
1+3++2+2+2+0.25+2.5+2.5+3
1+1+2+3+2+2.75+0.5+0.5+3
18.25+15.75
-log(3)
-log(300)
-log(3000)
-log(.3000)
-log(.5000)
-log(0.1)
-log(0.3)
-log(0.5)
23*5
23*6
2*60
120+45
50/4
#### Osmoregulation and Osmoconforming in marine invertebrates ####
#### Load in the libraries ####
library(ggplot2)
#### Load in the data ####
## Load in the data from your computer
lab05_data <- read.csv(file.choose(), header = TRUE)
af07f08_Pec <- read.csv(file.choose())
head(af07f08_Pec)
### load the libraries
library(devtools)
install_github("MorphoFun/kraken", dependencies = TRUE)
library(kraken) # use for kraken::jointAngle()
library(signal) # use for signal::interp1()
library(pspline) # use for pspline::smooth.Pspline()
library(ggplot2) # for plotting
library(reshape2) # use for reshape2::melt()
?jointAngle
elbowAngle(af07f08_Pec[,7:9], af07f08_Pec[,10:12], af07f08_Pec[,13:15])
elbowAngle <- jointAngle(af07f08_Pec[,7:9], af07f08_Pec[,10:12], af07f08_Pec[,13:15])
elbowAngle
wristAngle <- jointAngle(af07f08_Pec[,10:12], af07f08_Pec[,13:15], af07f08_Pec[,19:21])
wristAngle
wristAngle <- jointAngle(af07f08_Pec[,10:12], af07f08_Pec[,13:15], af07f08_Pec[,16:18])
wristAngle
head(af07f08_Pec)
SegVectorBackY <- P1[,2] - P2[,2]
SegVectorBackX <- P1[,1] - P2[,1]
P1 <- af07f08_Pec[,1:3]
P2 <- af07f08_Pec[,4:6]
SegVectorBackY <- P1[,2] - P2[,2]
SegVectorBackX <- P1[,1] - P2[,1]
TanYaw <- SegVectorBackY./SegVectorBackX;
TanYaw <- SegVectorBackY/SegVectorBackX;
yaw <- (atan(TanYaw))
yaw
yaw <- (atan(TanYaw))*(pi/180)
yaw
yaw <- (atan2(TanYaw))*(pi/180)
TanYaw <- SegVectorBackY %*% solve(SegVectorBackX);
SegVectorBackX
TanYaw <- solve(t(SegVectorBackY), SegVectorBackX);
?mrdivide
library(pracma)
?mrdivide
TanYaw <- mrdivide(SegVectorBackY, SegVectorBackX)
yaw <- (atan(TanYaw))*(pi/180)
yaw
?atan2
atan(SegVectorBackY, SegVectorBackX)
SegVectorBackX
?matrix
matrix(c(8, 1, 6, 3, 5, 7, 4, 9, 2), 3, 3)
matrix(c(8, 1, 6, 3, 5, 7, 4, 9, 2), 3, 3, byrow = TRUE)
a <- matrix(c(8, 1, 6, 3, 5, 7, 4, 9, 2), 3, 3, byrow = TRUE)
b <- matrix(c(3, 3, 4, 1, 2, 4, 3, 1, 2), 3, 3, byrow = TRUE)
b
a/b
?atan
yaw <- (atan(TanYaw))*(pi/180)
TanYaw <- SegVectorBackY/SegVectorBackX
yaw <- (atan(TanYaw))*(pi/180)
yaw
yaw <- (atan(TanYaw))*(180/pi)
yaw
0.004978444
0.005226819
0.005483069
0.005747358
0.006019848
0.006300701
0.006590101
0.00688825
0.007195354
P1
P1 <- data.frame(X = c(0.004978444,
0.005226819,
0.005483069,
0.005747358,
0.006019848,
0.006300701,
0.006590101,
0.00688825,
0.007195354),
Y = c(-0.09374413,
-0.09380451,
-0.09382974,
-0.09382203,
-0.09378361,
-0.09371668,
-0.09362362,
-0.09350694,
-0.09336917
))
P1
P2 <- data.frame(X = c(0.001005251,
0.001195392,
0.001406054,
0.001636047,
0.001884185,
0.002149271,
0.002429912,
0.002724486,
0.003031363),
Y = c(-0.09343679,
-0.09347614,
-0.09350069,
-0.09350983,
-0.09350293,
-0.09347937,
-0.09343846,
-0.09337947,
-0.09330165
))
P2
yaw(P1, P2)
yaw <- function(P1, P2, ...) {
SegVectorBackY <- P1[,2] - P2[,2]
SegVectorBackX <- P1[,1] - P2[,1]
TanYaw <- SegVectorBackY/SegVectorBackX
yaw <- (atan(TanYaw))*(180/pi)
}
yaw(P1, P2)
yaw <- function(P1, P2, ...) {
SegVectorBackY <- P1[,2] - P2[,2]
SegVectorBackX <- P1[,1] - P2[,1]
TanYaw <- SegVectorBackY/SegVectorBackX
yaw <- (atan(TanYaw))*(180/pi)
output(yaw)
}
yaw(P1, P2)
yaw <- function(P1, P2, ...) {
SegVectorBackY <- P1[,2] - P2[,2]
SegVectorBackX <- P1[,1] - P2[,1]
TanYaw <- SegVectorBackY/SegVectorBackX
yaw <- (atan(TanYaw))*(180/pi)
return(yaw)
}
yaw(P1, P2)
P1 <- data.frame(X = c(0.004978444,
0.005226819,
0.005483069,
0.005747358,
0.006019848,
0.006300701,
0.006590101,
0.00688825,
0.007195354,
0.007511617),
Y = c(-0.09374413,
-0.09380451,
-0.09382974,
-0.09382203,
-0.09378361,
-0.09371668,
-0.09362362,
-0.09350694,
-0.09336917,
-0.09321286
))
P2 <- data.frame(X = c(0.001005251,
0.001195392,
0.001406054,
0.001636047,
0.001884185,
0.002149271,
0.002429912,
0.002724486,
0.003031363,
0.003348911),
Y = c(-0.09343679,
-0.09347614,
-0.09350069,
-0.09350983,
-0.09350293,
-0.09347937,
-0.09343846,
-0.09337947,
-0.09330165,
-0.09320426
))
yaw(P1, P2)
install_github("MorphoFun/kraken", dependencies = TRUE)
install_github("MorphoFun/kraken", dependencies = TRUE)
devtools::document()
setwd("C:/Users/sandy/Dropbox/kraken")
devtools::document()
devtools::document()
devtools::document()
install_github("MorphoFun/kraken", dependencies = TRUE)
devtools::document()
devtools::document()
traceback()
Version()
VersionInfo()
??version
R.Version()
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
# Clear everything in the R workspace, so nothing gets mixed up between different trials
rm(list=ls(all=TRUE))
# Determining the date you're running these analyses
today <- Sys.Date()
SaveDate <- format(today, format="%y%m%d")
# Read in values to calibrate each GRF component by; uses most recent Calibration Overview file
# when using list.files, need to use setwd as an assigned variable and also by itlself (see below) or it won't work
setwd('/GRFs/GRFs_Calibs')
CalibPath <- "~/dataraw"
Calib.Ind <- list.files(CalibPath, pattern=".csv", full=TRUE)
calib.Ind
CalibFile <- data.frame(read.csv("FinLimbGRFs_Calibs.csv", header=TRUE))
?read.csv
CalibFile <- data.frame(read.csv("~/dataraw/FinLimbGRFs_Calibs.csv", header=TRUE))
getwd()
CalibFile <- data.frame(read.csv("./dataraw/FinLimbGRFs_Calibs.csv", header=TRUE))
CalibFile
# Read the most recent Video Info file
VideoFile <- data.frame(read.csv("./dataraw/FinLimbGRFs_VideoInfo.csv", header=TRUE))
VideoFile
rm(list = ls(all. names = TRUE))
rm(list = ls(all.names = TRUE))
5000/100
calibFile <- read.csv(list.files())
calibFile <- read.csv(file.list())
CalibFile <- read.csv(file.choose())
head(CalibFile)
VideoFile <- read.csv(file.choose())
myFile <- file.choose()
myData <- read.table(myFile, header=FALSE)
myData <- myData[,c(1:12)] # Last 4 columns/channels were unused, so only subsetting what I need
names(myData) <- c("Light.Volts", "Vert1.Volts", "Vert2.Volts", "Vert3.Volts", "Vert4.Volts", "VertSum.Volts", "ML1.Volts", "ML2.Volts", "MLSum.Volts", "Hz1.Volts", "Hz2.Volts", "HzSum.Volts")
myData$Sweep <- 1:nrow(myData)
# Determining trial name and data collectiond date
Trial <- substring(myFile, 87, 93)
Date <- substring(myFile, 75, 80)
head(myData)
# Looking up video info
# Appendages listed as "Both" have both pectoral and pelvic appendage data
VideoInfo <- VideoFile[VideoFile$File.name %in% Trial,]
VideoInfo$Pectoral.Start.Frame <- as.numeric(VideoInfo$Pectoral.Start.Frame)
VideoInfo$Pectoral.End.Frame <- as.numeric(VideoInfo$Pectoral.End.Frame)
VideoInfo$Pelvic.Start.Frame <- as.numeric(VideoInfo$Pelvic.Start.Frame)
VideoInfo$Pelvic.End.Frame <- as.numeric(VideoInfo$Pelvic.End.Frame)
VideoInfo
Trial <- "af01f18"
# Looking up video info
# Appendages listed as "Both" have both pectoral and pelvic appendage data
VideoInfo <- VideoFile[VideoFile$File.name %in% Trial,]
head(VideoInfo)
VideoInfo$Pectoral.Start.Frame <- as.numeric(VideoInfo$Pectoral.Start.Frame)
VideoInfo$Pectoral.End.Frame <- as.numeric(VideoInfo$Pectoral.End.Frame)
VideoInfo$Pelvic.Start.Frame <- as.numeric(VideoInfo$Pelvic.Start.Frame)
VideoInfo$Pelvic.End.Frame <- as.numeric(VideoInfo$Pelvic.End.Frame)
Date <- 110622
# Calibrating the raw force data and converting to newtons (if needed)
CalibInfo <- CalibFile[CalibFile$Date %in% Date,]
CalibInfo
myData$VertSumCalib.N <- myData$VertSum.Volts*CalibInfo$Vert.Calib
myData$MLSumCalib.N <- myData$MLSum.Volts*CalibInfo$ML.Calib
myData$HzSumCalib.N <- myData$HzSum.Volts*CalibInfo$Hz.Calib
# Putting forces in terms of GRF (which is opposite in direction to the force produced by the limb onto the force plate)
myData$GRF.VertSumCalib.N <- myData$VertSumCalib.N # Already made negative based on the calibration calculations conducted earlier in the excel calibration files
myData$GRF.MLSumCalib.N <- -myData$MLSumCalib.N
myData$GRF.HzSumCalib.N <- myData$HzSumCalib.N # Rotating the force plate results in the signage changes, so don't need to multiply by -1
# Determining what sweep number the light is turned on, so I can sync with video frames
LightSwitch <- myData[which(myData$Light.Volts<0),]
LightSwitch
LightOnset <- LightSwitch[which(LightSwitch$Sweep == min(LightSwitch$Sweep)),]
LightOnset
# Synching video frames with force sweep numbers
# *50 is due to the conversion from sweeps to frames (5000 Hz for force/100 Hz for video)
if (!is.na(VideoInfo$Pectoral.Start.Frame)) PectoralStartSweep <- LightOnset$Sweep-((VideoInfo$Light.Start-VideoInfo$Pectoral.Start.Frame)*50)
if (!is.na(VideoInfo$Pectoral.End.Frame)) PectoralEndSweep <- LightOnset$Sweep-((VideoInfo$Light.Start-VideoInfo$Pectoral.End.Frame)*50)
if (!is.na(VideoInfo$Pelvic.Start.Frame)) PelvicStartSweep <- LightOnset$Sweep-((VideoInfo$Light.Start-VideoInfo$Pelvic.Start.Frame)*50)
if (!is.na(VideoInfo$Pelvic.End.Frame)) PelvicEndSweep <- LightOnset$Sweep-((VideoInfo$Light.Start-VideoInfo$Pelvic.End.Frame)*50)
PectoralEndSweep
PectoralStartSweep
# Calculating the difference between the force trace zero and what should really be zero on the force trace (i.e., calculating horizontal offset)
# First, determine whether the pectoral or pelvic appendages appear first on the force trace
if (VideoInfo$Appendages == 'Pectoral') First <- data.frame(PectoralStartSweep)
if (VideoInfo$Appendages == 'Pelvic') First <- data.frame(PelvicStartSweep)
if (VideoInfo$Appendages == 'Both') First <- data.frame(PectoralStartSweep,PelvicStartSweep)
FirstTrace <- First[which(First==min(First))]
OffsetCalcStart <- (FirstTrace[1,1])-2000
OffsetCalcEnd <- (FirstTrace[1,1])-1000
GRF.VertSumCalib.N.Offset <- mean(myData$GRF.VertSumCalib.N[OffsetCalcStart:OffsetCalcEnd])
GRF.MLSumCalib.N.Offset <- mean(myData$GRF.MLSumCalib.N[OffsetCalcStart:OffsetCalcEnd])
GRF.HzSumCalib.N.Offset <- mean(myData$GRF.HzSumCalib.N[OffsetCalcStart:OffsetCalcEnd])
# Zeroing the force trace data using the horizontal offset value
myData$GRF.VertSumCalib.N.Zero <- myData$GRF.VertSumCalib.N-GRF.VertSumCalib.N.Offset
myData$GRF.MLSumCalib.N.Zero <- myData$GRF.MLSumCalib.N-GRF.MLSumCalib.N.Offset
myData$GRF.HzSumCalib.N.Zero <- myData$GRF.HzSumCalib.N-GRF.HzSumCalib.N.Offset
# Plotting force traces
if (VideoInfo$Appendages == 'Pectoral') Last <- data.frame(PectoralEndSweep)
if (VideoInfo$Appendages == 'Pelvic') Last <- data.frame(PelvicEndSweep)
if (VideoInfo$Appendages == 'Both') Last <- data.frame(PectoralEndSweep, PelvicEndSweep)
LastTrace <- Last[which(Last==max(Last))]
PlotStart <- FirstTrace[1,1]-1000
PlotEnd <- LastTrace[1,1]+1000
# Putting together the start and end points for the appendage cycles
#ifelse ((!is.na(VideoInfo$Pelvic.Start.Frame)), ImpPointsX <- data.frame(PectoralStartSweep, PectoralEndSweep,PelvicStartSweep, PelvicEndSweep), ImpPointsX <- data.frame(PectoralStartSweep, PectoralEndSweep))
#  ifelse ((!is.na(VideoInfo$Pelvic.Start.Frame)), names(ImpPointsX) <- c('Pectoral Start', 'Pectoral End','Pelvic Start', 'Pelvic End'), names(ImpPointsX) <- c('Pectoral Start', 'Pectoral End'))
#
#ifelse ((!is.na(VideoInfo$Pectoral.Start.Frame)), ImpPointsX <- data.frame(PectoralStartSweep, PectoralEndSweep,PelvicStartSweep, PelvicEndSweep), ImpPointsX <- data.frame(PelvicStartSweep, PelvicEndSweep))
#  ifelse ((!is.na(VideoInfo$Pectoral.Start.Frame)), names(ImpPointsX) <- c('Pectoral Start', 'Pectoral End','Pelvic Start', 'Pelvic End'), names(ImpPointsX) <- c('Pelvic Start', 'Pelvic End'))
#
if (!is.na(VideoInfo$Pectoral.Start.Frame) & !is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPointsX <- data.frame(PectoralStartSweep, PectoralEndSweep,PelvicStartSweep, PelvicEndSweep)
names(ImpPointsX) <- c('Pectoral Start', 'Pectoral End','Pelvic Start', 'Pelvic End') }
if (!is.na(VideoInfo$Pectoral.Start.Frame) & is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPointsX <- data.frame(PectoralStartSweep, PectoralEndSweep)
names(ImpPointsX) <- c('Pectoral Start', 'Pectoral End') }
if (is.na(VideoInfo$Pectoral.Start.Frame) & !is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPointsX <- data.frame(PelvicStartSweep, PelvicEndSweep)
names(ImpPointsX) <- c('Pelvic Start', 'Pelvic End') }
attach(myData)
if (!is.na(VideoInfo$Pectoral.Start.Frame) & is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPoints.GRFVert <- data.frame(GRF.VertSumCalib.N.Zero[PectoralStartSweep], GRF.VertSumCalib.N.Zero[PectoralEndSweep])
ImpPoints.GRFML <- data.frame(GRF.MLSumCalib.N.Zero[PectoralStartSweep], GRF.MLSumCalib.N.Zero[PectoralEndSweep])
ImpPoints.GRFHz <- data.frame(GRF.HzSumCalib.N.Zero[PectoralStartSweep], GRF.HzSumCalib.N.Zero[PectoralEndSweep])
}
if (is.na(VideoInfo$Pectoral.Start.Frame) & !is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPoints.GRFVert <- data.frame(GRF.VertSumCalib.N.Zero[PelvicStartSweep], GRF.VertSumCalib.N.Zero[PelvicEndSweep])
ImpPoints.GRFML <- data.frame(GRF.MLSumCalib.N.Zero[PelvicStartSweep], GRF.MLSumCalib.N.Zero[PelvicEndSweep])
ImpPoints.GRFHz <- data.frame(GRF.HzSumCalib.N.Zero[PelvicStartSweep], GRF.HzSumCalib.N.Zero[PelvicEndSweep])
}
if (!is.na(VideoInfo$Pectoral.Start.Frame) & !is.na(VideoInfo$Pelvic.Start.Frame)) {
ImpPoints.GRFVert <- data.frame(GRF.VertSumCalib.N.Zero[PectoralStartSweep], GRF.VertSumCalib.N.Zero[PectoralEndSweep], GRF.VertSumCalib.N.Zero[PelvicStartSweep], GRF.VertSumCalib.N.Zero[PelvicEndSweep])
ImpPoints.GRFML <- data.frame(GRF.MLSumCalib.N.Zero[PectoralStartSweep], GRF.MLSumCalib.N.Zero[PectoralEndSweep], GRF.MLSumCalib.N.Zero[PelvicStartSweep], GRF.MLSumCalib.N.Zero[PelvicEndSweep])
ImpPoints.GRFHz <- data.frame(GRF.HzSumCalib.N.Zero[PectoralStartSweep], GRF.HzSumCalib.N.Zero[PectoralEndSweep], GRF.HzSumCalib.N.Zero[PelvicStartSweep], GRF.HzSumCalib.N.Zero[PelvicEndSweep])
}
detach(myData)
quartz(width=10)
par(mfrow=c(1,3), oma = c(0, 0, 2, 0))  # oma = outer margin with 2 lines above the top of the graphs
# Vertical component of GRF graph
plot(myData$Sweep[PlotStart:PlotEnd], myData$GRF.VertSumCalib.N.Zero[PlotStart:PlotEnd], xlab='Sweep', ylab='GRF - Vertical (N)', main='Zeroed GRF (Vertical) Force', type="l", col="blue")
text(ImpPointsX[1,], ImpPoints.GRFVert[1,], labels=names(ImpPointsX), pos=3, font=2) # pos: 1 = below, 2 = left, 3 = above, 4 = right
points(ImpPointsX[1,], ImpPoints.GRFVert[1,], type='p', pch='O', col='cyan')
# Mediolateral component of GRF graph
plot(myData$Sweep[PlotStart:PlotEnd], myData$GRF.MLSumCalib.N.Zero[PlotStart:PlotEnd], xlab='Sweep', ylab='GRF - Mediolateral (N)', main='Zeroed GRF (Mediolateral) Force', type="l", col="red")
points(ImpPointsX[1,], ImpPoints.GRFML[1,], type='p', pch='O', col='cyan')
text(ImpPointsX[1,], ImpPoints.GRFML[1,], labels=names(ImpPointsX), pos=3, font=2) # pos: 1 = below, 2 = left, 3 = above, 4 = right
# Horizontal (Anteroposterior) component of GRF graph
plot(myData$Sweep[PlotStart:PlotEnd], myData$GRF.HzSumCalib.N.Zero[PlotStart:PlotEnd], xlab='Sweep', ylab='GRF - Horizontal (N)', main='Zeroed GRF (Horizontal) Force', type="l", col="forestgreen")
points(ImpPointsX[1,], ImpPoints.GRFHz[1,], type='p', pch='O', col='cyan')
text(ImpPointsX[1,], ImpPoints.GRFHz[1,], labels=names(ImpPointsX), pos=3, font=2) # pos: 1 = below, 2 = left, 3 = above, 4 = right
mtext(Trial, line=0.5, outer=TRUE)  # writes an overall title over the graphs
# Preparing the data to be filtered
# Pectoral appendage stance
if (!VideoInfo$Appendages == 'Pelvic') {
# Calculating the range of sweeps for your stance
StanceSweeps.Pec <- myData$Sweep[PectoralStartSweep:PectoralEndSweep]
# Leaving extra sweeps in front and back of trace to reduce likelihood of edge effects (Extra sweeps = 25% of stance duration)
Extra.Pec <- round(.25*length(StanceSweeps.Pec))
FilterPrep.Sweeps.Pec <- myData$Sweep[c(PectoralStartSweep-Extra.Pec):c(PectoralEndSweep+Extra.Pec)]
FilterGRFVert.Pec <- myData$GRF.VertSumCalib.N.Zero[c(PectoralStartSweep-Extra.Pec):c(PectoralEndSweep+Extra.Pec)]
FilterGRFML.Pec <- myData$GRF.MLSumCalib.N.Zero[c(PectoralStartSweep-Extra.Pec):c(PectoralEndSweep+Extra.Pec)]
FilterGRFHz.Pec <- myData$GRF.HzSumCalib.N.Zero[c(PectoralStartSweep-Extra.Pec):c(PectoralEndSweep+Extra.Pec)]
FilterPrep.Pec <- data.frame(FilterPrep.Sweeps.Pec,FilterGRFVert.Pec, FilterGRFML.Pec, FilterGRFHz.Pec)
names(FilterPrep.Pec) <- c('Sweep', 'GRF0SumVN', 'GRF0SumMLN', 'GRF0SumHzN')
}
if (!VideoInfo$Appendages == 'Pectoral') {
StanceSweeps.Pel <- myData$Sweep[PelvicStartSweep:PelvicEndSweep]
Extra.Pel <- round(.25*length(StanceSweeps.Pel))
FilterPrep.Sweeps.Pel <- myData$Sweep[c(PelvicStartSweep-Extra.Pel):c(PelvicEndSweep+Extra.Pel)]
FilterGRFVert.Pel <- myData$GRF.VertSumCalib.N.Zero[c(PelvicStartSweep-Extra.Pel):c(PelvicEndSweep+Extra.Pel)]
FilterGRFML.Pel <- myData$GRF.MLSumCalib.N.Zero[c(PelvicStartSweep-Extra.Pel):c(PelvicEndSweep+Extra.Pel)]
FilterGRFHz.Pel <- myData$GRF.HzSumCalib.N.Zero[c(PelvicStartSweep-Extra.Pel):c(PelvicEndSweep+Extra.Pel)]
FilterPrep.Pel <- data.frame(FilterPrep.Sweeps.Pel,FilterGRFVert.Pel, FilterGRFML.Pel, FilterGRFHz.Pel)
names(FilterPrep.Pel) <- c('Sweep', 'GRF0SumVN', 'GRF0SumMLN', 'GRF0SumHzN')
}
head(FilterPrep.Pec)
StanceSweeps.Pec
160/24
128/24
89/24
install.packages("purrr")
library(devtools)
install_github("MorphoFun/kraken")
library(devtools)
install.packages(devtools, dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(devtools)
install_github("MorphoFun/kraken")
install_github("MorphoFun/kraken")
install_github("MorphoFun/kraken")
library(kraken)
?af01f18
data(af01f18)
head(af01f18)
names(af01f18)
names(af01f18)[18] <- "Sweep"
names(af01f18)
getwd*()
getwd()
setwd("/data")
setwd("~/data")
setwd("./data")
getwd()
save(af01f18, file="af01f18.rda")
?af01f18
devtools::document()
?yank
?af01f18
devtools::document()
data("FinLimbGRFs_Peak")
str(FinLimbGRFs_Peak)
devtools::document()
str(af01f18)
devtools::document()
install_github("MorphoFun/kraken")
library(kraken)
# Clear everything in the R workspace, so nothing gets mixed up between different trials
rm(list=ls(all=TRUE))
# Determining the date you're running these analyses
today <- Sys.Date()
SaveDate <- format(today, format="%y%m%d")
#### LOAD THE CALIBRATION FILE ####
CalibFile <- data.frame(read.csv("./dataraw/FinLimbGRFs_Calibs.csv", header=TRUE))
setwd("..")
#### LOAD THE CALIBRATION FILE ####
CalibFile <- data.frame(read.csv("./dataraw/FinLimbGRFs_Calibs.csv", header=TRUE))
#### LOAD THE VIDEO INFO FILE ####
VideoFile <- data.frame(read.csv("./dataraw/FinLimbGRFs_VideoInfo.csv", header=TRUE))
#### LOADING THE DATA ####
setwd("./dataraw")
myFile <- file.choose()
# Determining trial name
Trial <-  substring(myFile, nchar(myFile)-10, nchar(myFile)-4)
Trial
#### LOOKING UP THE VIDEO INFO ####
# Appendages listed as "Both" have both pectoral and pelvic appendage data
VideoInfo <- VideoFile[VideoFile$File.name %in% Trial,]
VideoInfo$Pectoral.Start.Frame <- as.numeric(VideoInfo$Pectoral.Start.Frame)
VideoInfo$Pectoral.End.Frame <- as.numeric(VideoInfo$Pectoral.End.Frame)
VideoInfo$Pelvic.Start.Frame <- as.numeric(VideoInfo$Pelvic.Start.Frame)
VideoInfo$Pelvic.End.Frame <- as.numeric(VideoInfo$Pelvic.End.Frame)
Date <- format(as.Date(VideoInfo$Date.Filmed, format = "%m/%d/%y"), format="%y%m%d")
CalibInfo <- CalibFile[CalibFile$Date %in% Date,]
Pec_Forces <- voltToForce(myData, CalibInfo[,3:5], VideoInfo$Pectoral.Start.Frame, VideoInfo$Light.Start, VideoInfo$Pectoral.Start.Frame, VideoInfo$Pectoral.End.Frame, filename = Trial, BW = VideoInfo$Body.Weight.kg)
Pel_Forces <- voltToForce(myData, CalibInfo[,3:5], VideoInfo$Pectoral.Start.Frame, VideoInfo$Light.Start, VideoInfo$Pelvic.Start.Frame, VideoInfo$Pelvic.End.Frame, filename = Trial, BW = VideoInfo$Body.Weight.kg)
myData <- read.table(myFile, header=FALSE)
myData <- myData[,c(1:12)] # Last 4 columns/channels were unused, so only subsetting what I need
names(myData) <- c("light_Volts", "Vert1.Volts", "Vert2.Volts", "Vert3.Volts", "Vert4.Volts", "VertSum.Volts", "ML1.Volts", "ML2.Volts", "MLSum.Volts", "Hz1.Volts", "Hz2.Volts", "HzSum.Volts")
myData$Sweep <- 1:nrow(myData)
# Determining trial name
Trial <-  substring(myFile, nchar(myFile)-10, nchar(myFile)-4)
#### LOOKING UP THE VIDEO INFO ####
# Appendages listed as "Both" have both pectoral and pelvic appendage data
VideoInfo <- VideoFile[VideoFile$File.name %in% Trial,]
VideoInfo$Pectoral.Start.Frame <- as.numeric(VideoInfo$Pectoral.Start.Frame)
VideoInfo$Pectoral.End.Frame <- as.numeric(VideoInfo$Pectoral.End.Frame)
VideoInfo$Pelvic.Start.Frame <- as.numeric(VideoInfo$Pelvic.Start.Frame)
VideoInfo$Pelvic.End.Frame <- as.numeric(VideoInfo$Pelvic.End.Frame)
Date <- format(as.Date(VideoInfo$Date.Filmed, format = "%m/%d/%y"), format="%y%m%d")
CalibInfo <- CalibFile[CalibFile$Date %in% Date,]
Pec_Forces <- voltToForce(myData, CalibInfo[,3:5], VideoInfo$Pectoral.Start.Frame, VideoInfo$Light.Start, VideoInfo$Pectoral.Start.Frame, VideoInfo$Pectoral.End.Frame, filename = Trial, BW = VideoInfo$Body.Weight.kg)
Pel_Forces <- voltToForce(myData, CalibInfo[,3:5], VideoInfo$Pectoral.Start.Frame, VideoInfo$Light.Start, VideoInfo$Pelvic.Start.Frame, VideoInfo$Pelvic.End.Frame, filename = Trial, BW = VideoInfo$Body.Weight.kg)
?af01f18
VideoInfo
Pec_GRFs_Filtered_dataset_noOverlap <- removeOverlaps(Pec_GRFs_Filtered_dataset, VideoInfo[,2:3], VideoInfo[,4:5], VideoInfo$Filming.Rate.Hz)
library(kraken)
Pec_GRFs_Filtered_dataset_noOverlap <- removeOverlaps(Pec_GRFs_Filtered_dataset, VideoInfo[,2:3], VideoInfo[,4:5], VideoInfo$Filming.Rate.Hz)
library(devtools)
install_github("MorphoFun/kraken")
